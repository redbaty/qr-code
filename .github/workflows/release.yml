name: Publish Release

on:
  push:
    branches: [ master ]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get-version.outputs.new_version }}
      should_run: ${{ steps.get-version.outputs.should_run }}
    steps:
      - uses: actions/checkout@v4

      - name: Install js-yaml
        run: npm install js-yaml

      - id: get-version
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const pubspec = yaml.load(fs.readFileSync('./pubspec.yaml', 'utf8'));
            const currentVersion = pubspec.version;

            const tagPrefix = 'v'; // Adjust if your tags don't start with 'v'
            const tags = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const latestTag = tags.data.find(tag => tag.name.startsWith(tagPrefix));
            const latestVersion = latestTag ? latestTag.name.slice(tagPrefix.length) : '0.0.0';

            const [major, minor, patch] = currentVersion.split('.').map(Number);
            const [latestMajor, latestMinor, latestPatch] = latestVersion.split('.').map(Number);

            let newVersion = currentVersion;
            let shouldRun = false;

            if (major > latestMajor || (major === latestMajor && minor > latestMinor) || 
                (major === latestMajor && minor === latestMinor && patch > latestPatch)) {
              newVersion = currentVersion;
              shouldRun = true;
            } 

            core.setOutput('new_version', newVersion);
            core.setOutput('should_run', shouldRun);

  build-android:
    needs: check-version
    if: needs.check-version.outputs.should_run == 'true'
    runs-on: ubuntu-latest  
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # To ensure Flutter's version management works

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'  # Or your preferred channel

      - run: flutter pub get

      - name: Build Android
        run: flutter build apk --release

      - name: Upload Android Artifact
        uses: actions/upload-artifact@v3
        with:
          name: android-build
          path: build/app/outputs/flutter-apk/app-release.apk

  build-windows:
    needs: check-version
    if: needs.check-version.outputs.should_run == 'true'
    runs-on: windows-latest  
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # To ensure Flutter's version management works

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'  # Or your preferred channel

      - run: flutter pub get

      - name: Build Windows
        run: dart run inno_bundle:build --release

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: build/windows/x64/installer/Release/*-Installer.exe

  release:
    needs: [build-android, build-windows, check-version]
    if: needs.check-version.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/windows-build/*.exe
            artifacts/android-build/*.apk
          tag_name: v${{ needs.check-version.outputs.new_version }}
          name: Release v${{ needs.check-version.outputs.new_version }}
          body: |
            This is a new release of our app!
            It includes both Windows and Android builds.